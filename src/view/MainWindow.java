/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.FocusTraversalPolicy;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import static java.lang.Math.abs;
import static java.lang.Math.sqrt;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import javafx.animation.Animation;
import javafx.geometry.Insets;
import javafx.scene.shape.Circle;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.event.MouseInputListener;
import model.Token;

/**
 *
 * @author Runelord
 */
public class MainWindow extends javax.swing.JFrame {
    private int screenHeight;
    private int screenWidth;
    private int
            surfaceWidth,
            surfaceHeight;
    
    private Image backgroundImage;
    private Double pictureModifier;
    private InputStream inputStream = null;
    
    private File file;
    
    private Point
            zeroMousePosition,
            zeroLabelPosition=new Point(0, 0);
    private int selectedToken;
    private JLabel draggedLabel = new JLabel();
    
    LinkedList <Point> mouseLabelPosition=new LinkedList <Point> ();
    
    LinkedList <File> fileList = new LinkedList <File> ();
    LinkedList <BufferedImage[]> buffList = new LinkedList <BufferedImage[]> ();
    LinkedList <Token> tokenList = new LinkedList <Token> ();
    
    LinkedList <File> mapFileList = new LinkedList <File> ();
    
    int mapZoom=10;
    
    
    //LinkedList <BufferedImage> mapBuffList = new LinkedList <BufferedImage> ();
    //LinkedList <BufferedImage> mapZoomBuffList = new LinkedList <BufferedImage> ();
    
    LinkedList <BufferedImage[]> mapBuffList = new LinkedList <BufferedImage[]> ();
    
    LinkedList <JLabel> mapLabelList = new LinkedList <JLabel> ();
    
    //distance
    double distanceMax;
    
    boolean 
            tmcLOnline=false,
            tmcROnline=false,
            tmcUOnline=false,
            tmcDOnline=false,
            
            tmcLReverse=false,
            
            released=false;
    
    int direction;
    private int mapScrollYMax;
    private int mapNOfSteps;
    
    LinkedList <Map> mapList = new LinkedList <Map> ();
    
    BufferedImage[]
            bricksDL=new BufferedImage[11],
            bricksDR=new BufferedImage[11],
            bricksLR=new BufferedImage[11],
            bricksUD=new BufferedImage[11],
            bricksUL=new BufferedImage[11],
            bricksUR=new BufferedImage[11];
    
    BufferedImage planetBigBuff;
    ImageIcon[] planetIcon=new ImageIcon[720];
    
    boolean endThreads=false;
    
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        panMenu = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtAssetFolder = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnLoadAssets = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        btnMakeServer = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        panTable = new javax.swing.JPanel();
        panControl = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        A = new javax.swing.JButton();
        S = new javax.swing.JButton();
        D = new javax.swing.JButton();
        W = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnExit1 = new javax.swing.JButton();
        btnPrintAll = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtDistanceMax = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        panTokenSource = new javax.swing.JPanel();
        panTokenSource2 = new javax.swing.JPanel();
        panTokenSource3 = new javax.swing.JPanel();
        jScrollBar1 = new javax.swing.JScrollBar();
        panMapSource = new javax.swing.JPanel();
        panTokenSource4 = new javax.swing.JPanel();
        panMapMenu = new javax.swing.JPanel();
        slidMap = new javax.swing.JScrollBar();
        jPanel5 = new javax.swing.JPanel();
        panBackground = new javax.swing.JPanel();
        labBackground = new javax.swing.JLabel();
        labCredit = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IPMap 0.00.01");
        setBackground(new java.awt.Color(255, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setUndecorated(true);
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        panMenu.setBackground(new java.awt.Color(0, 0, 255));
        panMenu.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panMenuMouseDragged(evt);
            }
        });
        panMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panMenuMousePressed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtAssetFolder.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAssetFolder.setText("f");
        txtAssetFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAssetFolderActionPerformed(evt);
            }
        });

        jLabel6.setText("Asset Folder:");

        btnLoadAssets.setText("Load Assets");
        btnLoadAssets.setOpaque(false);
        btnLoadAssets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAssetsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnLoadAssets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAssetFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAssetFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoadAssets)
                .addGap(6, 6, 6))
        );

        jButton1.setText("Help");
        jButton1.setName(""); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Made by Runelord to brag about");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Host Adress:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Password:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Port:");

        jButton3.setText("Connect");
        jButton3.setEnabled(false);

        btnMakeServer.setText("Make Server");
        btnMakeServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnMakeServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMakeServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(6, 6, 6))
        );

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panMenuLayout = new javax.swing.GroupLayout(panMenu);
        panMenu.setLayout(panMenuLayout);
        panMenuLayout.setHorizontalGroup(
            panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMenuLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        panMenuLayout.setVerticalGroup(
            panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMenuLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(6, 6, 6))
        );

        panTable.setBackground(new java.awt.Color(101, 0, 11));
        panTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panTableMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                panTableMouseMoved(evt);
            }
        });
        panTable.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                panTableMouseWheelMoved(evt);
            }
        });
        panTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panTableMouseReleased(evt);
            }
        });

        panControl.setBackground(new java.awt.Color(164, 89, 83));

        jPanel4.setBackground(new java.awt.Color(164, 89, 83));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        A.setText("A");
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });

        S.setText("S");
        S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SActionPerformed(evt);
            }
        });

        D.setText("D");
        D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DActionPerformed(evt);
            }
        });

        W.setText("W");
        W.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(A, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(W, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(S, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(D, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(W)
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(D)
                    .addComponent(S)
                    .addComponent(A))
                .addGap(6, 6, 6))
        );

        jPanel6.setBackground(new java.awt.Color(164, 89, 83));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnExit1.setText("Exit");
        btnExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExit1ActionPerformed(evt);
            }
        });

        btnPrintAll.setText("Print All Assets");
        btnPrintAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintAllActionPerformed(evt);
            }
        });

        jButton4.setText("Set");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        txtDistanceMax.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDistanceMax.setText("1800");
        txtDistanceMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDistanceMaxActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Max Allowed Distance in Pixels:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnExit1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPrintAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDistanceMax, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintAll)
                    .addComponent(txtDistanceMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit1)
                    .addComponent(jButton4))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout panControlLayout = new javax.swing.GroupLayout(panControl);
        panControl.setLayout(panControlLayout);
        panControlLayout.setHorizontalGroup(
            panControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panControlLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        panControlLayout.setVerticalGroup(
            panControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panControlLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(panControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        panTokenSource.setBackground(new java.awt.Color(0, 255, 255));
        panTokenSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panTokenSourceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panTokenSourceMouseExited(evt);
            }
        });

        panTokenSource2.setBackground(new java.awt.Color(164, 89, 83));

        panTokenSource3.setBackground(new java.awt.Color(164, 89, 83));
        panTokenSource3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panTokenSource3Layout = new javax.swing.GroupLayout(panTokenSource3);
        panTokenSource3.setLayout(panTokenSource3Layout);
        panTokenSource3Layout.setHorizontalGroup(
            panTokenSource3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panTokenSource3Layout.createSequentialGroup()
                .addGap(0, 212, Short.MAX_VALUE)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panTokenSource3Layout.setVerticalGroup(
            panTokenSource3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panTokenSource2Layout = new javax.swing.GroupLayout(panTokenSource2);
        panTokenSource2.setLayout(panTokenSource2Layout);
        panTokenSource2Layout.setHorizontalGroup(
            panTokenSource2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTokenSource2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(panTokenSource3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        panTokenSource2Layout.setVerticalGroup(
            panTokenSource2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTokenSource2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(panTokenSource3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout panTokenSourceLayout = new javax.swing.GroupLayout(panTokenSource);
        panTokenSource.setLayout(panTokenSourceLayout);
        panTokenSourceLayout.setHorizontalGroup(
            panTokenSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTokenSourceLayout.createSequentialGroup()
                .addComponent(panTokenSource2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panTokenSourceLayout.setVerticalGroup(
            panTokenSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panTokenSource2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panMapSource.setBackground(new java.awt.Color(0, 255, 255));
        panMapSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panMapSourceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panMapSourceMouseExited(evt);
            }
        });

        panTokenSource4.setBackground(new java.awt.Color(164, 89, 83));
        panTokenSource4.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                panTokenSource4MouseWheelMoved(evt);
            }
        });

        panMapMenu.setBackground(new java.awt.Color(164, 89, 83));
        panMapMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel5.setBackground(new java.awt.Color(164, 89, 83));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 261, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panMapMenuLayout = new javax.swing.GroupLayout(panMapMenu);
        panMapMenu.setLayout(panMapMenuLayout);
        panMapMenuLayout.setHorizontalGroup(
            panMapMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panMapMenuLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(slidMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panMapMenuLayout.setVerticalGroup(
            panMapMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slidMap, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
            .addGroup(panMapMenuLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout panTokenSource4Layout = new javax.swing.GroupLayout(panTokenSource4);
        panTokenSource4.setLayout(panTokenSource4Layout);
        panTokenSource4Layout.setHorizontalGroup(
            panTokenSource4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTokenSource4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(panMapMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        panTokenSource4Layout.setVerticalGroup(
            panTokenSource4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTokenSource4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(panMapMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout panMapSourceLayout = new javax.swing.GroupLayout(panMapSource);
        panMapSource.setLayout(panMapSourceLayout);
        panMapSourceLayout.setHorizontalGroup(
            panMapSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMapSourceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panTokenSource4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        panMapSourceLayout.setVerticalGroup(
            panMapSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panTokenSource4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panTableLayout = new javax.swing.GroupLayout(panTable);
        panTable.setLayout(panTableLayout);
        panTableLayout.setHorizontalGroup(
            panTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panTableLayout.createSequentialGroup()
                        .addComponent(panControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panTableLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(panMapSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panTokenSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panTableLayout.setVerticalGroup(
            panTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addGroup(panTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panTokenSource, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panMapSource, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panBackground.setBackground(new java.awt.Color(0, 255, 0));
        panBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panBackgroundMouseDragged(evt);
            }
        });
        panBackground.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panBackgroundMousePressed(evt);
            }
        });

        labBackground.setText("Background Label");

        labCredit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labCredit.setForeground(new java.awt.Color(255, 0, 0));
        labCredit.setText("Photo by Aaron Burden on Unsplash");

        javax.swing.GroupLayout panBackgroundLayout = new javax.swing.GroupLayout(panBackground);
        panBackground.setLayout(panBackgroundLayout);
        panBackgroundLayout.setHorizontalGroup(
            panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBackgroundLayout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addComponent(labCredit)
                .addContainerGap())
            .addGroup(panBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labBackground)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panBackgroundLayout.setVerticalGroup(
            panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labBackground)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(labCredit)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(321, 321, 321)
                        .addComponent(panBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addComponent(panTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(panMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(panBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        endThreads=true;
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnMakeServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeServerActionPerformed
        // TODO add your handling code here:
        
        
        
        
        /*db1=new JPanel();
        panTable.add(db1);
        //panTable.setComponentZOrder(db1, panTable.getComponentCount()-1);
        db1.setOpaque(false);
        db1.setLocation(0, 0);
        db1.setSize(surfaceWidth, surfaceHeight);
        db1.setVisible(true);*/
        
        
        /*db2=new JPanel();
        panTable.add(db2);
        //panTable.setComponentZOrder(db2, panTable.getComponentCount()-1);
        db2.setOpaque(false);
        db2.setLocation(0, 0);
        db2.setSize(surfaceWidth, surfaceHeight);
        db2.setVisible(true);*/
        
        //panTable.repaint();
        
        panMenu.setVisible(false);
        panTable.setVisible(true);
        

        
        
        
        //tmc=new TableMenuControl();
        //tmc.start();
        
        //panTable.setBackground(panTable.getBackground());
        
            //System.out.println(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getFullScreenWindow().getComponents()[0].getLocationOnScreen().x+"\n"+GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getFullScreenWindow().getComponent(0).getLocationOnScreen().y);
        
            //screenWidth=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getWidth();
        
            //System.out.println("Screen Resolution: "+screenWidth+"x"+screenHeight);
        
        /*
        Toolkit tk = Toolkit.getDefaultToolkit();  
        int xSize = ((int) tk.getScreenSize().getWidth());  
        int ySize = ((int) tk.getScreenSize().getHeight());  
        */
        
        //setExtendedState(getExtendedState()|MAXIMIZED_BOTH );
        
        //table.setSize(screenWidth, screenHeight);
        //table.setLocation(0, 0);
    }//GEN-LAST:event_btnMakeServerActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        // TODO add your handling code here:
        endThreads=true;
        dispose();
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void panBackgroundMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBackgroundMousePressed
        // TODO add your handling code here:
        //zeroMousePosition=getMousePosition();
        //zeroLabelPosition=labBackground.getLocation();
    }//GEN-LAST:event_panBackgroundMousePressed

    private void panBackgroundMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBackgroundMouseDragged
        // TODO add your handling code here:
        /*
        presentMousePosition=getMousePosition();
        
        dWidth=presentMousePosition.x-zeroMousePosition.x;
        dHeight=presentMousePosition.y-zeroMousePosition.y;
        
        panMenu.setLocation(zeroLabelPosition.x+dWidth,zeroLabelPosition.y+dHeight);
        panBackground.setBackground(new Color(0, 0, 0, 0));
        setBackground(new Color(0, 0, 0, 0));
        panMenu.
        */
    }//GEN-LAST:event_panBackgroundMouseDragged

    private void panMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panMenuMousePressed
        // TODO add your handling code here:
        zeroMousePosition=getMousePosition();
        zeroLabelPosition=panMenu.getLocation();
    }//GEN-LAST:event_panMenuMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        /*
        presentMousePosition=getMousePosition();
        
        dWidth=presentMousePosition.x-zeroMousePosition.x;
        dHeight=presentMousePosition.y-zeroMousePosition.y;
        
        panMenu.setLocation(zeroLabelPosition.x+dWidth,zeroLabelPosition.y+dHeight);
        panBackground.setBackground(new Color(0, 0, 0, 0));
        setBackground(new Color(0, 0, 0, 0));
        panMenu.
        */
    }//GEN-LAST:event_formMouseDragged

    private void panMenuMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panMenuMouseDragged
        // TODO add your handling code here:
        Point presentMousePosition=getMousePosition();
        int dWidth=0, dHeight=0;
        
        try
        {
            dWidth=presentMousePosition.x-zeroMousePosition.x;
            dHeight=presentMousePosition.y-zeroMousePosition.y;
        }  catch(java.lang.NullPointerException e) {}
        
        Point targetPosition=new Point();
        targetPosition.x=zeroLabelPosition.x+dWidth;
        targetPosition.y=zeroLabelPosition.y+dHeight;
        
        if(targetPosition.x<0) targetPosition.x=0;
        if(targetPosition.x>surfaceWidth-panMenu.getWidth()) targetPosition.x=surfaceWidth-panMenu.getWidth();
        if(targetPosition.y<0) targetPosition.y=0;
        if(targetPosition.y>surfaceHeight-panMenu.getHeight()) targetPosition.y=surfaceHeight-panMenu.getHeight();
        
        panMenu.setLocation(targetPosition);
    }//GEN-LAST:event_panMenuMouseDragged

    private void btnLoadAssetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAssetsActionPerformed
        // TODO add your handling code here:
        File
                file2 = new File(txtAssetFolder.getText()),
                file3 = new File(txtAssetFolder.getText()+"/map");
        
        fileList.clear();
        mapFileList.clear();
        
        if(file2.isDirectory())
        for(int i=0; i<file2.listFiles().length; i++)
        {
            if(!file2.listFiles()[i].isDirectory()) fileList.add(file2.listFiles()[i]);
            System.out.println(file2.listFiles()[i]);    
        }
        
        for(int i=0; i<fileList.size(); i++)
        {
            BufferedImage[] assetBuff = new BufferedImage[11];
            
            try
            {
                assetBuff[10] = ImageIO.read(fileList.get(i));
                buffList.add(assetBuff);
            } catch (Exception e) {System.out.println("Token not loaded\n"+e);}
            
            for(int j=1; j<10; j++)
            {
                AffineTransform scale = AffineTransform.getScaleInstance(j*0.1, j*0.1);
                AffineTransformOp opScale = new AffineTransformOp(scale, AffineTransformOp.TYPE_BICUBIC);
                buffList.get(i)[j]=opScale.filter(buffList.get(i)[10], null);
                
                //buffList.get(i)[j] = buffList.get(i)[10].getScaledInstance(buffList.get(i)[10].getWidth(), buffList.get(i)[10].getHeight(), Image.SCALE_AREA_AVERAGING);
                
                System.out.println("Token "+i+". "+j+"0%: "+buffList.get(i)[j].getWidth()+"x"+buffList.get(i)[j].getHeight());
            
                //AffineTransform scale2 = AffineTransform.get(j*0.1, j*0.1);
                //AffineTransformOp opScale2 = new AffineTransformOp(scale2, AffineTransformOp.TYPE_BICUBIC);
                //buffList.get(i)[j]=opScale2.filter(buffList.get(i)[j], null);
            }
        }
        
        if(file3.isDirectory())
        for(int i=0; i<file3.listFiles().length; i++)
            mapFileList.add(file3.listFiles()[i]);
        
        for(int i=0; i<mapFileList.size(); i++)
        {
            BufferedImage[] assetBuff = new BufferedImage[11];
            
            try
            {
                assetBuff[10] = ImageIO.read(mapFileList.get(i));
                mapBuffList.add(assetBuff);
                
                //Checking DPI
                ImageInputStream iis = ImageIO.createImageInputStream(mapFileList.get(i));
                Iterator it = ImageIO.getImageReaders(iis);
                ImageReader reader = (ImageReader) it.next();
                reader.setInput(iis);
                
            } catch (Exception e) {System.out.println("Map not loaded\n"+e);}
            
            for(int j=1; j<10; j++)
            {
                AffineTransform scale = AffineTransform.getScaleInstance(j*0.1, j*0.1);
                AffineTransformOp opScale = new AffineTransformOp(scale, AffineTransformOp.TYPE_BICUBIC);
                mapBuffList.get(i)[j]=opScale.filter(mapBuffList.get(i)[10], null);
                System.out.println("Map "+i+". "+j+"0%: "+mapBuffList.get(i)[j].getWidth()+"x"+mapBuffList.get(i)[j].getHeight());
            }
            
            new MapSource(i);
        }
        recalibrateMapScroll();
        
        try
            {
                bricksDL[1] = ImageIO.read(getClass().getResource("/images/bricks_down_left.png"));
            } catch (Exception e) {System.out.println("bricksDL not loaded.\nException:\n"+e);}
        try
            {
                bricksDR[1] = ImageIO.read(getClass().getResource("/images/bricks_down_right.png"));
                labCredit.setVisible(true);
            } catch (Exception e) {System.out.println("bricksDR not loaded.\nException:\n"+e);}
        try
            {
                bricksLR[1] = ImageIO.read(getClass().getResource("/images/bricks_left_&_right.png"));
            } catch (Exception e) {System.out.println("bricksLR not loaded.\nException:\n"+e);}
        try
            {
                bricksUD[1] = ImageIO.read(getClass().getResource("/images/bricks_up_&_down.png"));
                labCredit.setVisible(true);
            } catch (Exception e) {System.out.println("bricksUD not loaded.\nException:\n"+e);}
        try
            {
                bricksUL[1] = ImageIO.read(getClass().getResource("/images/bricks_up_left.png"));
            } catch (Exception e) {System.out.println("bricksUL not loaded.\nException:\n"+e);}
        try
            {
                bricksUR[1] = ImageIO.read(getClass().getResource("/images/bricks_up_right.png"));
            } catch (Exception e) {System.out.println("bricksUR not loaded.\nException:\n"+e);}

    }//GEN-LAST:event_btnLoadAssetsActionPerformed

    private void btnPrintAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintAllActionPerformed
        // TODO add your handling code here:
        int 
                x=0,
                y=0,
                yMax=0;
        
        {   
            Image assetImage=mapBuffList.get(0)[10];

            ImageIcon assetIcon=new ImageIcon(assetImage);
            
            mapLabelList.add(new JLabel());
            //panMap.add(mapLabelList.get(0));
            mapLabelList.get(0).setLocation(0, 0);
            mapLabelList.get(0).setSize(
                    mapBuffList.get(0)[10].getWidth(),
                    mapBuffList.get(0)[10].getHeight()
                    //((mapBuffList.get(0)[10].getWidth()-20)/160+2)*160,
                    //((mapBuffList.get(0)[10].getHeight()-20)/160+2)*160
                );
            mapLabelList.get(0).setIcon(assetIcon);
            //panMap.setComponentZOrder(mapLabelList.get(0), panMap.getComponentCount()-1);
            
            mapLabelList.get(0).setVisible(true);
        }
        
        //panTable.add(panMap);
        
        //panMap.setLocation(0, 0);
        //panMap.setSize(mapLabelList.get(0).getWidth(), mapLabelList.get(0).getHeight());
        
        //for(int i=0; i<tokenList.size(); i++) panMap.remove(tokenList.get(i));
        tokenList.clear();
        
        for(int i=0; i<buffList.size(); i++)
        {   
            Image assetImage=buffList.get(i)[10];

            ImageIcon assetIcon=new ImageIcon(assetImage);
            
            if(yMax<buffList.get(i)[10].getHeight())
                yMax=buffList.get(i)[10].getHeight();
            
            /*if(x>panMap.getWidth()-buffList.get(i)[10].getWidth())
            {
                x=0;
                y=y+yMax;
            }*/
            
            tokenList.add(new Token());
            mapLabelList.get(0).add(tokenList.get(i));
            tokenList.get(i).setLocation(x, y);
            tokenList.get(i).setSize(buffList.get(i)[10].getWidth(), buffList.get(i)[10].getHeight());
            
            Point centerPosition=new Point(
                    tokenList.get(i).getX()+tokenList.get(i).getWidth()/2,
                    tokenList.get(i).getY()+tokenList.get(i).getHeight()/2
            );
            //tokenList.get(i).xRatio=((double)centerPosition.x)/panMap.getWidth();
            //tokenList.get(i).yRatio=((double)centerPosition.y)/panMap.getHeight();
            
            tokenList.get(i).setIcon(assetIcon);
            
            //panMap.setComponentZOrder(tokenList.get(i), 0);
            
            tokenList.get(i).setVisible(true);
            
            x=x+buffList.get(i)[10].getWidth();
        }
        
        System.out.println(panTable.getComponentCount()+" things on panTable");
        //for(int i=0; i<panTable.size(); i++)
        
        //panTable.setComponentZOrder(panMap, panTable.getComponentCount()-1);
        //System.out.println("panMap's ZOrder: "+panTable.getComponentZOrder(panMap));
        
        
        
        //panMap.setFocusable(true);
        //panMap.requestFocusInWindow(true);
        //panMap.setFocusTraversalPolicyProvider(true);
    }//GEN-LAST:event_btnPrintAllActionPerformed

    private void panTableMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_panTableMouseWheelMoved
        // TODO add your handling code here:
        /*    for(int i=0; i<tokenList.size(); i++)
            {
                tokenList.get(i).setSize(
                        mapZoom*buffList.get(i)[10].getWidth()/10,
                        mapZoom*buffList.get(i)[10].getHeight()/10
                    );
            
                //Point centerPosition=new Point(
                  //      (int)(tokenList.get(i).xRatio*panMap.getWidth()),
                    //    (int)(tokenList.get(i).yRatio*panMap.getHeight())
                    //);
                //tokenList.get(i).setLocation(
                  //      (int)(centerPosition.x-((double)tokenList.get(i).getWidth()/2)),
                    //    (int)(centerPosition.y-((double)tokenList.get(i).getHeight()/2))
                    //);
                image=buffList.get(i)[mapZoom];
                icon=new ImageIcon(image);
                tokenList.get(i).setIcon(icon);
            }
        
        //panTable.setComponentZOrder(panMap, panTable.getComponentCount()-1);
        panTable.*/
    }//GEN-LAST:event_panTableMouseWheelMoved

    private void panTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panTableMousePressed
        // TODO add your handling code here:        
        /*try
        {
            zeroMousePosition=panMap.getMousePosition(true);
        } catch(java.lang.NullPointerException e) {}*/
        
        mouseLabelPosition.clear();
        
        //int minZ=panMap.getComponentCount();
        
        selectedToken=-1;
        
        for(int i=0; i<tokenList.size(); i++)
        {
            mouseLabelPosition.add(new Point());
            
            //mouseLabelPosition.get(i).x=panMap.getMousePosition(true).x-tokenList.get(i).getLocation().x;
            //mouseLabelPosition.get(i).y=panMap.getMousePosition(true).y-tokenList.get(i).getLocation().y;
            
            //try
            //{
                /*if(
                        tokenList.get(i).getX()<=panMap.getMousePosition(true).x
                     && tokenList.get(i).getX()+tokenList.get(i).getWidth()>=panMap.getMousePosition(true).x
                     && tokenList.get(i).getY()<=panMap.getMousePosition(true).y
                     && tokenList.get(i).getY()+tokenList.get(i).getHeight()>=panMap.getMousePosition(true).y
                        )
                {
                    int transparency=((buffList.get(i)[mapZoom].getRGB(mouseLabelPosition.get(i).x, mouseLabelPosition.get(i).y)) & 0xff000000)>>24;
                    if(transparency!=0)
                    {
                        
                        
                        /*if(minZ>panMap.getComponentZOrder(tokenList.get(i)))
                        {
                            minZ=panMap.getComponentZOrder(tokenList.get(i));
                            selectedToken=i;
                        }
                    }
                }*/
           // }catch (java.lang.NullPointerException e) {}
        }
        
        if(selectedToken!=-1)
        {
            zeroLabelPosition=tokenList.get(selectedToken).getLocation();
        
            draggedLabel.setLocation(tokenList.get(selectedToken).getLocation());
            draggedLabel.setSize(tokenList.get(selectedToken).getSize());
            draggedLabel.setIcon(tokenList.get(selectedToken).getIcon());
            draggedLabel.setVisible(true);
            //panMap.setComponentZOrder(draggedLabel, 0);
            
            //Allowable distance
            //distanceMax=Double.valueOf(6*draggedLabel.getHeight());
        }
        else {
            try
            {
                zeroMousePosition=panTable.getMousePosition(true);
                //zeroLabelPosition=panMap.getLocation();
            } catch(java.lang.NullPointerException e) {}
        }
        
        panTable.repaint(0, 0, panTable.getWidth(), panTable.getHeight());
    }//GEN-LAST:event_panTableMousePressed

    private void panTableMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panTableMouseDragged
        // TODO add your handling code here:
        //panMap.setLocation(getMousePosition(true).x-25,
          //      getMousePosition(true).y-25);
        //panMap.setComponentZOrder(draggedLabel, 0)
        /*
        Point presentMousePosition=panMap.getMousePosition(true);
        if (selectedToken==-1) presentMousePosition=panTable.getMousePosition(true);
        
        int dWidth=0, dHeight=0;
        
        
            
        
        
        try
        {
            dWidth=presentMousePosition.x-zeroMousePosition.x;
            dHeight=presentMousePosition.y-zeroMousePosition.y;
        } catch(java.lang.NullPointerException e) {}
        
        Point targetPosition=new Point();
        targetPosition.x=zeroLabelPosition.x+dWidth;
        targetPosition.y=zeroLabelPosition.y+dHeight;
        
        //distance
        Double 
                distanceX=Double.valueOf(dWidth),
                distanceY=Double.valueOf(dHeight),
                distanceActual=sqrt(distanceX*distanceX+distanceY*distanceY);
        
        if(distanceActual>distanceMax && selectedToken!=-1)
        {
            if(dWidth!=0)
            {
                double k = distanceY/distanceX;
            
                double distanceNeededX = sqrt(
                                distanceMax * distanceMax
                                / (1 + k*k)
                        );            
                double distanceNeededY = k * distanceNeededX;
                
                int dX=(int)distanceNeededX;
                int dY=(int)distanceNeededY;
                
                if(dWidth<0)
                {
                    dX=-dX;
                    dY=-dY;
                }
                
                targetPosition.x=zeroLabelPosition.x+dX;
                targetPosition.y=zeroLabelPosition.y+dY;
            }
            else
                if(dHeight>0)
                    targetPosition.y=zeroLabelPosition.y+(int)distanceMax;
                else
                    targetPosition.y=zeroLabelPosition.y-(int)distanceMax;
        }
        
        //edges
        if(selectedToken!=-1)
        {
            if(targetPosition.x<0) targetPosition.x=0;
            if(targetPosition.x>panMap.getWidth()-draggedLabel.getWidth()) targetPosition.x=panMap.getWidth()-draggedLabel.getWidth();
            if(targetPosition.y<0) targetPosition.y=0;
            if(targetPosition.y>panMap.getHeight()-draggedLabel.getHeight()) targetPosition.y=panMap.getHeight()-draggedLabel.getHeight();
        }
        
        if(selectedToken==-1) panMap.setLocation(targetPosition);
        draggedLabel.setLocation(targetPosition);
        panTable.repaint(0, 0, panTable.getWidth(), panTable.getHeight());
        */
        //draggedLabel.
        //panPrint.
    }//GEN-LAST:event_panTableMouseDragged

    private void panTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panTableMouseReleased
        // TODO add your handling code here:
        /*if(selectedToken!=-1)
        {
            tokenList.get(selectedToken).setLocation(draggedLabel.getLocation());
            
            Point centerPosition=new Point(
                    tokenList.get(selectedToken).getX()+tokenList.get(selectedToken).getWidth()/2,
                    tokenList.get(selectedToken).getY()+tokenList.get(selectedToken).getHeight()/2
            );
            tokenList.get(selectedToken).xRatio=((double)centerPosition.x)/panMap.getWidth();
            tokenList.get(selectedToken).yRatio=((double)centerPosition.y)/panMap.getHeight();
            
            System.out.println("Token "+selectedToken+".: xRatio="+tokenList.get(selectedToken).xRatio+", yRatio="+tokenList.get(selectedToken).yRatio);
            
            panMap.setComponentZOrder(tokenList.get(selectedToken), 1);
            draggedLabel.setVisible(false);
            panTable.repaint(0, 0, panTable.getWidth(), panTable.getHeight());
        }*/
    }//GEN-LAST:event_panTableMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        distanceMax=Integer.decode(txtDistanceMax.getText())*mapZoom*0.1;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //while (getWidth() > screenWidth) pack();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        setSize(
                screenWidth,
                screenHeight
        );
    }//GEN-LAST:event_formComponentResized

    private void WActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WActionPerformed
        // TODO add your handling code here:
        //panMap.setLocation(panMap.getLocation().x, panMap.getLocation().y+256);
    }//GEN-LAST:event_WActionPerformed

    private void SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SActionPerformed
        // TODO add your handling code here:
        //panMap.setLocation(panMap.getLocation().x, panMap.getLocation().y-256);
    }//GEN-LAST:event_SActionPerformed

    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
        // TODO add your handling code here:
        //panMap.setLocation(panMap.getLocation().x+256, panMap.getLocation().y);
    }//GEN-LAST:event_AActionPerformed

    private void DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DActionPerformed
        // TODO add your handling code here:
        //panMap.setLocation(panMap.getLocation().x-256, panMap.getLocation().y);
    }//GEN-LAST:event_DActionPerformed

    private void txtAssetFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAssetFolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAssetFolderActionPerformed

    private void txtDistanceMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDistanceMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDistanceMaxActionPerformed

    private void panTokenSourceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panTokenSourceMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_panTokenSourceMouseEntered

    private void panTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panTableMouseMoved
        // TODO add your handling code here:
        if (
                (
                    panTable.getMousePosition(true).x==0 
                || 
                    (
                        panTable.getMousePosition(true).x>panMapSource.getX()+panMapSource.getWidth()
                        &&
                        panMapSource.getX()==0
                    )
                )
                && tmcLOnline==false
            )
        {
            TableLeftMenuControl tlmc=new TableLeftMenuControl();
            tlmc.start();
        }
        
        if (
                (
                    panTable.getMousePosition(true).x==surfaceWidth-1 
                || 
                    (
                        panTable.getMousePosition(true).x<panTokenSource.getX()
                        &&
                        panTokenSource.getX()==surfaceWidth-panTokenSource.getWidth()
                    )
                )
                && tmcROnline==false
            )
        {
            TableRightMenuControl trmc=new TableRightMenuControl();
            trmc.start();
        }
    }//GEN-LAST:event_panTableMouseMoved

    private void panTokenSourceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panTokenSourceMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_panTokenSourceMouseExited

    private void panMapSourceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panMapSourceMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_panMapSourceMouseEntered

    private void panMapSourceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panMapSourceMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_panMapSourceMouseExited

    private void panTokenSource4MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_panTokenSource4MouseWheelMoved
        // TODO add your handling code here:
        slidMap.setValue(slidMap.getValue()+10*evt.getWheelRotation());
    }//GEN-LAST:event_panTokenSource4MouseWheelMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton A;
    private javax.swing.JButton D;
    private javax.swing.JButton S;
    private javax.swing.JButton W;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExit1;
    private javax.swing.JButton btnLoadAssets;
    private javax.swing.JButton btnMakeServer;
    private javax.swing.JButton btnPrintAll;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel labBackground;
    private javax.swing.JLabel labCredit;
    private javax.swing.JPanel panBackground;
    private javax.swing.JPanel panControl;
    private javax.swing.JPanel panMapMenu;
    private javax.swing.JPanel panMapSource;
    private javax.swing.JPanel panMenu;
    private javax.swing.JPanel panTable;
    private javax.swing.JPanel panTokenSource;
    private javax.swing.JPanel panTokenSource2;
    private javax.swing.JPanel panTokenSource3;
    private javax.swing.JPanel panTokenSource4;
    private javax.swing.JScrollBar slidMap;
    private javax.swing.JTextField txtAssetFolder;
    private javax.swing.JTextField txtDistanceMax;
    // End of variables declaration//GEN-END:variables

    public void activate() throws FileNotFoundException, IOException {       
        //panTable.setVisible(false);
        
        setTitle("IPMap 0.00.07");
        
        
        
        labCredit.setVisible(false);
        distanceMax=Double.valueOf(txtDistanceMax.getText());
        
        file = new File("background.jpg");
        
        fullScreen();
        
        panTable.setVisible(false);
        
        panMenu.setBackground(new Color(238, 238, 238/*, 0*/));
        //panBackground.setBackground(new Color(0, 0, 0, 0));
        //setBackground(new Color(0, 0, 0, 0));
        
        selectedToken=-1;
        
        add(panTable);
        add(panMenu);
        add(panBackground);
        //panMap.add(draggedLabel);
        panBackground.add(labBackground);
        panTable.add(panTokenSource);
        panTable.add(panMapSource);
        
        /*setLocation(0, 0);
        setSize(
                screenWidth,
                screenHeight
        );*/
        
        panBackground.setLocation(0, 0);
        panBackground.setSize(
                surfaceWidth,
                surfaceHeight
        );
        
        panMenu.setLocation(
                surfaceWidth/2-panMenu.getWidth()/2, 
                surfaceHeight/2-panMenu.getHeight()/2
        );
               
        //setBackground(new Color(0,0,0,0));
        
        //panTable.setVisible(false);
                             
        
        panTable.setComponentZOrder(panTokenSource, 0);
        panTable.setComponentZOrder(panControl, 1);
        panTable.setComponentZOrder(panMapSource, 2);
        //panTable.setComponentZOrder(panMap, 3);
        
        panTokenSource.setOpaque(false);
        panTokenSource.setSize(surfaceWidth*1/10, surfaceHeight*8/10);
        panTokenSource.setLocation(surfaceWidth, surfaceHeight*1/10);
        
        panMapSource.setOpaque(false);
        panMapSource.setSize(surfaceWidth-surfaceHeight*1/10, surfaceHeight*8/10);
        panMapSource.setLocation(-panMapSource.getWidth(), surfaceHeight*1/10);
        
        
        
        panTable.setLocation(0,0);
        panTable.setSize(surfaceWidth, surfaceHeight);
        
        slidMap.addAdjustmentListener(
                new AdjustmentListener()
                {  
                    public void adjustmentValueChanged(AdjustmentEvent e)
                    {  
                        //System.out.println("\nAjustmentEvent\n"+e);
                        //label.setText("Vertical Scrollbar value is:"+ s.getValue());
                        
                        int startingY=(int)(-slidMap.getValue()*mapScrollYMax/mapNOfSteps);
                        
                        int y=0;
                        for (int i=0; i<jPanel5.getComponentCount(); i++)
                        {
                            jPanel5.getComponent(i).setLocation(
                                   0,
                                   startingY+y
                            );
                            y=y+jPanel5.getComponent(i).getHeight()+6;
                        }
                    }
                }
        );
        
        setVisible(true);
        
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    
    public void fullScreen() throws IOException{
        /*
        for(int i=0; i<GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayModes().length; i++){
            int bitDepth=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayModes()[i].getBitDepth();
            int width=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayModes()[i].getWidth();
            int height=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayModes()[i].getHeight();
            int refreshRate=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayModes()[i].getRefreshRate();
       
            System.out.println(bitDepth+" "+width+" "+height+" "+refreshRate);
        }
        */
        
        /*
        screenWidth=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getWidth();
        screenHeight=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getHeight();
        System.out.println("Screen Resolution: "+screenWidth+"x"+screenHeight);
        */
        
        screenWidth=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getWidth();
        screenHeight=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getHeight();
        //screenWidth=GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width-20;
        //screenHeight=GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height-20;
        System.out.println("Screen Resolution: "+screenWidth+"x"+screenHeight);
        
        surfaceWidth=screenWidth; // - getInsets().left - getInsets().right;
        surfaceHeight=screenHeight; // - getInsets().top - getInsets().bottom;
               
        setLocation(0, 0);
        setSize(
                screenWidth,
                screenHeight
        );
        
        setMinimumSize(new Dimension (screenWidth, screenHeight));
        setMaximumSize(new Dimension (screenWidth, screenHeight));
        
        //Loading of bigPicture
        BufferedImage backgroundFileBuff=null;
                        
        try
        {
            backgroundFileBuff = ImageIO.read(file);
            
        } catch (Exception e) {System.out.println("Background image not loaded\nException\n"+e);}
        
        if(backgroundFileBuff==null)
            try
            {
                backgroundFileBuff = ImageIO.read(getClass().getResource("/images/defaultBackground.jpg"));
                labCredit.setVisible(true);
            } catch (Exception e) {System.out.println("Default background image not loaded.\nException:\n"+e);}
        
        double pmw, pmh;
        pmw=(double)backgroundFileBuff.getWidth()/surfaceWidth;
        pmh=(double)backgroundFileBuff.getHeight()/surfaceHeight;
        
        int bigCutoutWidth=0, bigCutoutHeight=0;
        
        //For background picture biger than the screen
        if(backgroundFileBuff.getWidth()>=surfaceWidth
                && backgroundFileBuff.getHeight()>=surfaceHeight)
        {
            if(pmw<pmh) pictureModifier=pmw;
            else pictureModifier=pmh;
            
            bigCutoutWidth=(int) (pictureModifier*surfaceWidth);
            bigCutoutHeight=(int) (pictureModifier*surfaceHeight);
        }
        
        //For background picture with Width smaller than screen's
        else if(backgroundFileBuff.getWidth()<screenWidth
                && backgroundFileBuff.getHeight()>=surfaceHeight)
        {
            pictureModifier=pmw;
            
            bigCutoutWidth=backgroundFileBuff.getWidth();
            bigCutoutHeight=(int) (pictureModifier*surfaceHeight);
        }
        
        //For background picture with Height smaller than screen's
        else if(backgroundFileBuff.getWidth()>=surfaceWidth
                && backgroundFileBuff.getHeight()<surfaceHeight)
        {
            pictureModifier=pmh;
            
            bigCutoutWidth=(int) (pictureModifier*surfaceWidth);
            bigCutoutHeight=backgroundFileBuff.getHeight();
        }
        
        //For background picture smaller than the screen
        else if(backgroundFileBuff.getWidth()<surfaceWidth
                && backgroundFileBuff.getHeight()<surfaceHeight)
        {
            if(pmw<pmh) pictureModifier=pmw;
            else pictureModifier=pmh;
            
            bigCutoutWidth=backgroundFileBuff.getWidth();
            bigCutoutHeight=backgroundFileBuff.getHeight();
        }
        
        System.out.println("Picture Modifier: "+pictureModifier);
        System.out.println("Big Cutout Resolution: "+bigCutoutWidth+"x"+bigCutoutHeight);
        
        BufferedImage cutoutBuff=null;        
        
        cutoutBuff=backgroundFileBuff.getSubimage
                                            (
                                                (int)
                                                        (backgroundFileBuff.getWidth()
                                                        -bigCutoutWidth)/2, 
                                                (int)
                                                        (backgroundFileBuff.getHeight()
                                                        -bigCutoutHeight)/2,
                                                bigCutoutWidth,
                                                bigCutoutHeight
                                            );
        
        AffineTransform scale = AffineTransform.getScaleInstance(1/pictureModifier, 1/pictureModifier);
        AffineTransformOp opScale = new AffineTransformOp(scale, AffineTransformOp.TYPE_BILINEAR);
        cutoutBuff=opScale.filter(cutoutBuff, null);
        
        backgroundImage = cutoutBuff;
        
        System.out.println("Background Test: "
                                +backgroundImage.getWidth(null)
                                +"x"
                                +backgroundImage.getHeight(null)
                            );
        
        ImageIcon backgroundIcon=new ImageIcon(backgroundImage);
        
        labBackground.setLocation(0, 0);
        labBackground.setSize(backgroundImage.getWidth(null), backgroundImage.getHeight(null));
        labBackground.setIcon(backgroundIcon);
        
        //planeta.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("/images/planeta.gif"))));
        //System.out.println(ImageIO.read(getClass().getResource("/images/planeta.gif")));
        //URL url = new URL("http://i.stack.imgur.com/OtTIY.gif");
        
        /*LOADING OF GIF FROM RESOURCES
        ImageReader reader = ImageIO.getImageReadersBySuffix("GIF").next();
        ImageInputStream in = ImageIO.createImageInputStream(getClass().getResourceAsStream("/images/planeta.gif"));
        reader.setInput(in);
        for (int i = 0, count = reader.getNumImages(true); i < count; i++)
        {
            BufferedImage buff = reader.read(i);
            ImageIO.write(buff, "PNG", new File("planet" + i + ".png"));
            
            Image image=buff;
            planetIcon[i]=new ImageIcon(image);    
        }*/
        
        /*
        //LOADING OF SPREADSHEET FROM RESOURCE
        Image image;
        try
            {
                planetBigBuff = ImageIO.read(getClass().getResource("/images/1329453819 - 546 - 30x24.png"));
            } catch (Exception e) {System.out.println("Default background image not loaded.\nException:\n"+e);} 
        for(int j=0; j<24; j++)
            for(int i=0; i<30; i++)
            {
                //planetBuff[j*30+i]=planetBigBuff.getSubimage(i*546, j*546, 546, 546);
                image=planetBigBuff.getSubimage(i*546, j*546, 546, 546);
                planetIcon[j*30+i]=new ImageIcon(image);
            }
        
        planetBigBuff=planetBigBuff.getSubimage(0, 0, 1, 1);
        System.gc();
        //planet.setIcon(new ImageIcon(getClass().getResource("/images/planeta.gif")));
        */
        
        
        
        
        
        
        
        repaint();
                        
        /*
        rightPanelWidth=(int) (screenWidth*0.2);
        downPanelHeight=(int) (screenHeight*0.1);
        tableWidth=screenWidth-rightPanelWidth;
        tableHeight=screenHeight-downPanelHeight;
        System.out.println("Table Resolution: "+tableWidth+"x"+tableHeight);
        System.out.println("Right Panel Width: "+rightPanelWidth);
        System.out.println("Down Panel Height: "+downPanelHeight);
        */
    }
    
    
    public class TableLeftMenuControl extends Thread{
        private double 
                speed;
        private double
                position;
        private boolean 
                stop=false;
        public boolean ignorePosition=false;
        private int count=0;
        
        @Override
        public synchronized void run()
        {
            {
                System.out.println("TMC-L online...");
                speed=panMapSource.getWidth()/120.0;
                position=panMapSource.getX();
                                
                if(!tmcLOnline) do
                {
                    tmcLOnline=true;
                    try
                    {
                         if(    
                                (
                                    getMousePosition(true).x==0
                                    ||
                                    getMousePosition(true).x<=panMapSource.getX()+panMapSource.getWidth()
                                )
                                &&
                                !ignorePosition
                                &&
                                !tmcLReverse
                            )
                                position=position+speed;
                        else position=position-speed;
                    
                        if(position>0) {
                            position=0;
                            stop=true;
                        }
                        if(position<=-panMapSource.getWidth()) {
                            position=-panMapSource.getWidth();
                            stop=true;
                        }
                        
                        panMapSource.setLocation(
                                (int)position,
                                panMapSource.getY()
                            );
                    } catch (Exception e) {}
                    
                    count++;
                    
                    try
                    {
                        wait(8, 333333);
                    } catch (Exception e){}
                }while(!stop);
                tmcLReverse=false;
                tmcLOnline=false;                
                System.out.println("TMC-L done in "+count+" steps.");
            }
        }
    }
    
    public class TableRightMenuControl extends Thread{
        private double 
                speed;
        private double
                position;
        private boolean 
                stop=false;
        private int count=0;
        
        @Override
        public synchronized void run()
        {
            {
                System.out.println("TMC-R online...");
                tmcROnline=true;
                speed=panTokenSource.getWidth()/120.0;
                position=panTokenSource.getX();
                                
                do
                {
                    try
                    {
                    if(
                            getMousePosition(true).x==surfaceWidth-1
                            ||
                            getMousePosition(true).x>=panTokenSource.getX()
                        )
                                position=position-speed;
                    else position=position+speed;
                    
                    if(position>surfaceWidth) {
                        position=surfaceWidth;
                        stop=true;
                    }
                    if(position<=surfaceWidth-panTokenSource.getWidth()) {
                        position=surfaceWidth-panTokenSource.getWidth();
                        stop=true;
                    }
                    
                    panTokenSource.setLocation(
                            (int)position,
                            panTokenSource.getY()
                        );
                    } catch (Exception e) {}
                    
                    count++;
                    
                    try
                    {
                        wait(8, 333333);
                    } catch (Exception e){}
                }while(!stop);
                tmcROnline=false;
                System.out.println("TMC-R done in "+count+" steps.");
            }
        }
    }

    public class MapSource extends JLabel{
        public int mapIndex;
        private boolean released=false;
        public MapSource(int a) {
            mapIndex=a;
            BufferedImage buff =mapBuffList.get(mapIndex)[10];
            
            double buffModifier =(double)buff.getWidth()/(jPanel5.getWidth());
            AffineTransform scale = AffineTransform.getScaleInstance(1/buffModifier, 1/buffModifier);
            AffineTransformOp opScale = new AffineTransformOp(scale, AffineTransformOp.TYPE_BICUBIC);
            buff=opScale.filter(buff, null);
        
            Image image =buff;
            ImageIcon icon =new ImageIcon(image);
            this.setIcon(icon);
            
            int y=0;
            for(int i=0; i<jPanel5.getComponentCount(); i++)
                if(
                        panMapMenu.getComponent(i).getClass()
                        ==
                        this.getClass()
                        )
                    y=y+panMapMenu.getComponent(i).getHeight()+6;
            
            
            this.setVisible(true);
            
            jPanel5.add(this);
            
            this.setSize(buff.getWidth(), buff.getHeight());
            this.setLocation(0, y);
            
            //SourceMouseListener sml=new SourceMouseListener(mapIndex);
            //this.addMouseListener(sml);
            
            this.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                draggedLabel.setLocation(evt.getXOnScreen(),evt.getYOnScreen());
                }
            });
            
            this.addMouseListener(new MouseListener(){

                @Override
                public void mouseClicked(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    if(e.getButton()==MouseEvent.BUTTON1
                            &&
                            tmcLOnline==false
                        )
                        makeAndStartNewTLMC();
                    
                    if(e.getButton()==MouseEvent.BUTTON1
                            &&
                            tmcLOnline==true
                        )
                        tmcLReverse=true;
                    
                    released=false;
                    
                    
                    
                    panTable.add(draggedLabel);
                    panTable.setComponentZOrder(draggedLabel, 0);
                    
                    
                    
                    draggedLabel.setSize(
                            mapBuffList.get(mapIndex)[1].getWidth(),
                            mapBuffList.get(mapIndex)[1].getHeight()
                    );
                    
                    draggedLabel.setLocation(e.getXOnScreen(), e.getYOnScreen());
                    
                    Image image =mapBuffList.get(mapIndex)[1];
                    ImageIcon icon =new ImageIcon(image);
                    draggedLabel.setIcon(icon);
                    draggedLabel.setVisible(true);
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    draggedLabel.setVisible(false);
                    Map map =new Map(mapIndex, e.getXOnScreen(), e.getYOnScreen());
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
                
            }
            );
            
            
            this.addMouseWheelListener(
                    new MouseWheelListener()
                {

                @Override
                public void mouseWheelMoved(MouseWheelEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    slidMap.setValue(slidMap.getValue()+10*e.getWheelRotation());
                }
                    
                }
            );
                     
        }
        private void makeAndStartNewTLMC() {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    TableLeftMenuControl tlmc =new TableLeftMenuControl();
                    tlmc.ignorePosition=true;
                    tlmc.start();
                }
        
    }
    
    public void recalibrateMapScroll(){
        mapScrollYMax=0;
        for (int i=0; i<jPanel5.getComponentCount(); i++)
        {
            mapScrollYMax=mapScrollYMax+jPanel5.getComponent(i).getHeight()+6;
        }
        mapScrollYMax=mapScrollYMax-jPanel5.getHeight()-6;
        int mapScrollStep=jPanel5.getHeight()/10;
        mapNOfSteps=10*mapScrollYMax/mapScrollStep;
        int mapCover=10*mapScrollYMax/jPanel5.getHeight();
        
        slidMap.setMaximum(mapNOfSteps+mapCover);
        slidMap.setVisibleAmount(mapCover);
    }
    
    public class Map extends JPanel{
        public int mapZoom=1;
        public int mapIndex;
        public JLabel mapImage;
        public Point mousePositionOnMap=new Point();
        public MouseMotionAdapter mma =new MouseMotionAdapter(){
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moveMap(evt.getX(), evt.getY());
                System.out.println(evt.getX()+" x "+ evt.getY());
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                //super.mouseMoved(e); //To change body of generated methods, choose Tools | Templates.
                if(
                    (
                        panTable.getMousePosition(true).x==0 
                    || 
                        (
                            panTable.getMousePosition(true).x>panMapSource.getX()+panMapSource.getWidth()
                            &&
                            panMapSource.getX()==0
                        )
                    )
                    && tmcLOnline==false
                )
                {
                    TableLeftMenuControl tlmc=new TableLeftMenuControl();
                    tlmc.start();
                }
        
                if(
                    (
                        panTable.getMousePosition(true).x==surfaceWidth-1 
                    || 
                        (
                            panTable.getMousePosition(true).x<panTokenSource.getX()
                            &&
                            panTokenSource.getX()==surfaceWidth-panTokenSource.getWidth()
                        )
                    )
                    && tmcROnline==false
                )
                {
                    TableRightMenuControl trmc=new TableRightMenuControl();
                    trmc.start();
                }
            }
            
        };
        public MouseListener ml =new MouseListener(){

                @Override
                public void mouseClicked(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    putOnTop();
                    checkMousePositionOnMap(e);
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }    
        };
        public MouseWheelListener mwl=new MouseWheelListener()
                {

                @Override
                public void mouseWheelMoved(MouseWheelEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    zoomMap(e);
                }
                    
        };
        public Map(int a, int b, int c){
            mapIndex=a;
            
            mapList.add(this);
            
            panTable.add(this);
            
            this.setLayout(null);
            
            this.setBackground(new Color(0, 0, 0, 0));
            
            BufferedImage buff =mapBuffList.get(a)[1];
            Image image =buff;
            ImageIcon icon =new ImageIcon(image);
            
            this.setSize(
                ((buff.getWidth()-2)/16+2)*16,
                ((buff.getHeight()-2)/16+2)*16
            );
            
            this.setLocation(b, c);
            
            int 
                    mapImageLocationX=(this.getWidth()-buff.getWidth())/2,
                    mapImageLocationY=(this.getHeight()-buff.getHeight())/2;
            
            mapImage =new JLabel();
            this.add(mapImage);
            mapImage.setSize(mapBuffList.get(a)[1].getWidth(), mapBuffList.get(a)[1].getHeight());
            mapImage.setLocation(
                    mapImageLocationX,
                    mapImageLocationY
            );
            mapImage.setIcon(icon);
            mapImage.setVisible(true);
            
            
            
            this.setVisible(true);
            
            this.addMouseMotionListener(mma);
            this.addMouseListener(ml);
            this.addMouseWheelListener(mwl);     
            
            for(int i=0; i<this.getHeight()/16; i++)
                for(int j=0; j<this.getWidth()/16; j++)
                {
                    image=null;
                    
                    if(i==0 
                            && j==0) image=bricksUL[1];
                    if(i==0 
                            && j>0 && j<this.getWidth()/16-1) image=bricksUD[1];
                    if(i==0 
                            && j==this.getWidth()/16-1) image=bricksUR[1];
                    
                    if(i>0 && i<this.getHeight()/16-1
                            && j==0) image=bricksLR[1];
                    if(i>0 && i<this.getHeight()/16-1
                            && j==this.getWidth()/16-1) image=bricksLR[1];
                    
                    
                    if(i==this.getHeight()/16-1 
                            && j==0) image=bricksDL[1];
                    if(i==this.getHeight()/16-1 
                            && j>0 && j<this.getWidth()/16-1) image=bricksUD[1];
                    if(i==this.getHeight()/16-1 
                            && j==this.getWidth()/16-1) image=bricksDR[1];
                    
                    if(image!=null)
                    {
                        icon=new ImageIcon(image);
                        JLabel border=new JLabel();
                        this.add(border);
                        border.setBounds(j*16, i*16, 16, 16);
                        border.setIcon(icon);
                        this.setComponentZOrder(border, 0);
                        border.setVisible(true);                        
                    }
                }
            
            panTable.setComponentZOrder(this, 4);
            
        }
        
        private void moveMap(int b, int c){
            
            this.setLocation(
                    panTable.getMousePosition(true).x-mousePositionOnMap.x,
                    panTable.getMousePosition(true).y-mousePositionOnMap.y
            );
            panTable.setComponentZOrder(this, 4);
            panTable.repaint();
        }
        
        private void zoomMap(MouseWheelEvent e){
                    mapZoom=mapZoom-e.getWheelRotation();
                    if(mapZoom<1) mapZoom=1;
                    if(mapZoom>10) mapZoom=10;
                    
                    BufferedImage buff =mapBuffList.get(mapIndex)[mapZoom];
                    Image image =buff;
                    ImageIcon icon =new ImageIcon(image);
                    mapImage.setIcon(icon);
                    mapImage.setSize(buff.getWidth(), buff.getHeight());
                            
                    int
                        mousePositionX =e.getX(),
                        mousePositionY =e.getY();
        
                    double
                        mousePositionXRatio =(mousePositionX*1.0)/this.getWidth(),
                        mousePositionYRatio =(mousePositionY*1.0)/this.getHeight();
        
                    this.setSize(
                            ((mapBuffList.get(mapIndex)[mapZoom].getWidth()-2*mapZoom)/(16*mapZoom)+2)*16*mapZoom,
                            ((mapBuffList.get(mapIndex)[mapZoom].getHeight()-2*mapZoom)/(16*mapZoom)+2)*16*mapZoom
                        );
                    
                    mapImage.setLocation(
                        (this.getWidth()-mapImage.getWidth())/2,
                        (this.getHeight()-mapImage.getHeight())/2
                    );
                    
                    mousePositionX =(int)(mousePositionXRatio*this.getWidth());
                    mousePositionY =(int)(mousePositionYRatio*this.getHeight());
        
                    this.setLocation(
                        panTable.getMousePosition(true).x-mousePositionX,
                        panTable.getMousePosition(true).y-mousePositionY
                    );
                    
                    panTable.setComponentZOrder(this, 4);
                    panTable.repaint();
        }
        
        private void checkMousePositionOnMap(MouseEvent e){
            mousePositionOnMap.setLocation(
                    e.getX(),
                    e.getY()
            );

        }
        
        private void putOnTop(){
            panTable.setComponentZOrder(this, 4);
            panTable.repaint();
            
        }        
    }
}